{"version":3,"file":"static/js/439.f754f94a.chunk.js","mappings":"yRAGaA,EAAUC,EAAAA,EAAAA,IAAH,+FAQPC,EAASD,EAAAA,EAAAA,OAAH,0CAKNE,EAAQF,EAAAA,EAAAA,IAAH,6CAGLG,GAAOH,EAAAA,EAAAA,GAAOI,EAAAA,GAAPJ,CAAH,8C,SCsEjB,EA/EsB,WACpB,OAAkCK,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAeH,GAAII,MAAK,SAAAC,GACtBV,EAAaU,EAEd,GACF,GAAE,CAACL,IAOJ,OAAKN,GAQH,4BACE,SAACL,EAAD,CAAQiB,QAdS,WAEnBV,EAASE,EAASS,MAAMC,KACzB,EAWG,sBACA,UAACrB,EAAD,YACE,0BACF,gBAAKsB,IAAKC,EAAAA,EAAehB,EAAUiB,YAAaC,IAAI,GAAGC,MAAM,WAG7D,UAACvB,EAAD,YACE,0BACGI,EAAUoB,MADb,KAEGpB,EAAUqB,aAAerB,EAAUqB,aAAaC,UAAU,EAAG,GAAK,GAFrE,QAMA,wCACe,GACZtB,EAAUuB,aACPC,KAAKC,OAAgC,GAAzBzB,EAAUuB,cAAmBG,QAAQ,GACjD,GAJN,QAQA,sCACA,uBAAI1B,EAAU2B,YAEd,oCACA,uBACG3B,EAAU4B,OACP5B,EAAU4B,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,IAC/C,YAIR,4BACE,oDACA,2BACE,yBACF,SAACnC,EAAD,CAAMoC,GAAG,OAAOpB,MAAO,CAAEC,KAAMV,EAASS,MAAMC,MAA9C,qBAIA,yBACA,SAACjB,EAAD,CAAMoC,GAAG,UAAUpB,MAAO,CAAEC,KAAMV,EAASS,MAAMC,MAAjD,wBAIA,SAAC,KAAD,cApDF,0BACE,yBAAI,SAACoB,EAAA,EAAD,OAwDX,C,mMCrFDC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAS,mCAEFC,EAAa,mCAAG,2GAAOC,EAAP,oDAAyCC,EAAzC,gCACRJ,EAAAA,EAAAA,IAAA,UAAaG,EAAb,oBAAkCF,GAAUG,GADpC,cACrB5B,EADqB,yBAEpBA,EAAK6B,MAFe,2CAAH,qDAKbC,EAAiB,mCAAG,WAAOC,EAAOH,GAAd,uFACZJ,EAAAA,EAAAA,IAAA,+BACOC,EADP,iCACsCM,EADtC,+BAEjBH,GAH6B,cACzB5B,EADyB,yBAKxBA,EAAK6B,MALmB,2CAAH,wDAQjB/B,EAAc,mCAAG,WAAOH,GAAP,8FAAWqC,EAAX,+BAA4B,GAAIJ,EAAhC,gCACTJ,EAAAA,EAAAA,IAAA,gBACR7B,GADQ,OACHqC,EADG,oBACuBP,EADvB,mBAEjBG,GAH0B,cACtB5B,EADsB,yBAKrBA,EAAK6B,MALgB,2CAAH,sDAQdI,EAAa,mCAAG,WAAOC,GAAP,uFAENV,EAAAA,EAAAA,IAAA,gBACRU,EADQ,4BACmBT,EADnB,oBAFM,cAEnBzB,EAFmB,yBAKlBA,EAAK6B,KAAKM,MALQ,2CAAH,sDASbC,EAAgB,mCAAG,WAAOF,GAAP,uFAEXV,EAAAA,EAAAA,IAAA,gBACRU,EADQ,4BACmBT,EADnB,oBAFW,cAExBzB,EAFwB,yBAKvBA,EAAK6B,KAAKQ,SALa,2CAAH,qD,uDCnCtB,IAAMhC,EAAe,iC","sources":["pages/MovieDetails.styled.jsx","pages/MovieDetails.jsx","services/apiService.js","services/constans.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink } from 'react-router-dom';\n\nexport const Details = styled.div`\ndisplay: flex;\nmargin-top: 20px;\nborder-bottom: 3px solid grey;\n\n\n`;\n\nexport const Button = styled.button`\ndisplay: flex;\n\n`\n\nexport const About = styled.div`\npadding-left: 20px;\n`\nexport const Link = styled(NavLink)`\nmargin-botton: 20px;\n`\n\n\n\n","import Loader from 'components/Loader/Loader';\nimport { useEffect, useState } from 'react';\nimport { Outlet, useParams, useNavigate, useLocation } from 'react-router';\n\nimport { fetchMovieById } from '../services/apiService';\nimport { BASE_IMG_URL } from '../services/constans';\n\nimport { Details, About, Button, Link} from './MovieDetails.styled';\n\n\nconst MoviesDeteils = () => {\n  const [movieData, setMovieData] = useState(null);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { id } = useParams();\n\n  useEffect(() => {\n    fetchMovieById(id).then(resp => {\n      setMovieData(resp);\n      //console.log(resp)\n    });\n  }, [id]);\n\n  const handleGoBack = () => {\n    //console.log(location)\n    navigate(location.state.from);\n  };\n\n  if (!movieData) {\n    return (\n      <div>\n        <h1><Loader/></h1>\n      </div>\n    );\n  }\n  return (\n    <div>\n      <Button onClick={handleGoBack}>go back</Button>\n      <Details>\n        <div>\n      <img src={BASE_IMG_URL + movieData.poster_path} alt=\"\" width=\"300\" />\n      \n      </div>\n      <About>\n        <h2>\n          {movieData.title} (\n          {movieData.release_date ? movieData.release_date.substring(0, 4) : ''}\n          )\n        </h2>\n\n        <p>\n          User Score: {''}\n          {movieData.vote_average\n            ? Math.fround(movieData.vote_average * 10).toFixed(0)\n            : ''}\n          %\n        </p>\n\n        <h3>Overview</h3>\n        <p>{movieData.overview}</p>\n\n        <h4>Genres</h4>\n        <p>\n          {movieData.genres\n            ? movieData.genres.map(genre => genre.name).join('')\n            : ''}\n        </p>\n        </About>\n      </Details>\n      <div>\n        <h4>Additional information</h4>\n        <ul>\n          <li>\n        <Link to=\"cast\" state={{ from: location.state.from }}>\n          Cast\n        </Link>\n        </li>\n        <li>\n        <Link to=\"reviews\" state={{ from: location.state.from }}>\n          Reviews\n        </Link>\n        </li>\n        <Outlet />\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default MoviesDeteils;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst apiKey = '4019d270e5fd1fc6ed3208efae0ca971';\n\nexport const fetchDayTrend = async (endpoints = `trending/movie/day`, options) => {\n  const resp = await axios.get(`${endpoints}?api_key=${apiKey}`, options);\n  return resp.data;\n};\n\nexport const fetchMovieByQuery = async (query, options) => {\n  const resp = await axios.get(\n    `search/movie?api_key=${apiKey}&language=en-US&query=${query}&page=1&include_adult=false`,\n    options\n  );\n  return resp.data;\n};\n\nexport const fetchMovieById = async (id, detailEndpoint = '', options) => {\n  const resp = await axios.get(\n    `movie/${id}${detailEndpoint}?api_key=${apiKey}&language=en-US`,\n    options\n  );\n  return resp.data;\n};\n\nexport const fetchCastInfo = async (movieId) => {\n\n    const resp = await axios.get(\n      `movie/${movieId}/credits?api_key=${apiKey}&language=en-US`\n    );\n    return resp.data.cast\n  \n}\n\nexport const fetchReviewsInfo = async (movieId) => {\n\n  const resp = await axios.get(\n    `movie/${movieId}/reviews?api_key=${apiKey}&language=en-US`\n  );\n  return resp.data.results\n\n\n}\n","export const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w400'"],"names":["Details","styled","Button","About","Link","NavLink","useState","movieData","setMovieData","navigate","useNavigate","location","useLocation","id","useParams","useEffect","fetchMovieById","then","resp","onClick","state","from","src","BASE_IMG_URL","poster_path","alt","width","title","release_date","substring","vote_average","Math","fround","toFixed","overview","genres","map","genre","name","join","to","Loader","axios","apiKey","fetchDayTrend","endpoints","options","data","fetchMovieByQuery","query","detailEndpoint","fetchCastInfo","movieId","cast","fetchReviewsInfo","results"],"sourceRoot":""}